/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const jwt = require("jsonwebtoken");
const zod = require("zod");
const mongoose = require("mongoose");

const jwtPassword = process.env.JWT_PASSWORD;
const port = process.env.PORT || 3000;
const mongoDBUrl = process.env.TODO_MONGODB_STRING;

mongoose.connect(mongoDBUrl);

const Todos = mongoose.model("Todos", {
  title: String,
  description: String,
});

const UserAuth = mongoose.model("Users", {
  username: String,
  password: String,
});

const app = express();

app.use(bodyParser.json());

const validateUserLoginData = (req, res, next) => {
  const mySchema = zod.object({
    username: zod.string().email(),
    password: zod.string().min(6),
  });

  const response = mySchema.safeParse({
    username: req.headers.username,
    password: req.headers.password,
  });

  if (response.success) {
    next();
  } else {
    res.status(404).json({
      msg: "invalid username or password",
    });
  }
};

const validateUserTodoData = (req, res, next) => {
  const mySchema = zod.object({
    title: zod.string(),
    description: zod.string(),
  });

  const response = mySchema.safeParse({
    title: req.body.title,
    description: req.body.description,
  });

  if (response.success) {
    next();
  } else {
    res.status(404).json({
      msg: "invalid todo format",
    });
  }
};

let users = [
  {
    username: "mahi@gmail.com",
    password: "mahidhar25",
  },
];

let todos = [
  {
    id: "todo1",
    title: "titile1",
    description: "description1",
  },
  {
    id: "todo2",
    title: "titile2",
    description: "description2",
  },
  {
    id: "todo3",
    title: "titile3",
    description: "description3",
  },
];

const validateUserDetails = (username, password, res) => {
  console.log(username + "" + password);
  const user = users.find(
    (user) => user.username === username && user.password === password
  );

  console.log("user : " + user);

  if (!user) {
    res.status(404).json({
      msg: "username and password not in our database",
    });
    return null;
  }
  const token = jwt.sign({ username: username }, jwtPassword);
  return token;
};

const verifyToken = (req, res, next) => {
  try {
    const token = req.headers.authorization;
    const isValidToken = jwt.verify(token, jwtPassword);
    if (isValidToken) {
      next();
    }
  } catch (e) {
    res.status(404).json({
      msg: "Invalid token",
    });
  }
};

app.get("/signin", validateUserLoginData, (req, res) => {
  const username = req.headers.username;
  const password = req.headers.password;
  let jwtString = validateUserDetails(username, password, res);
  if (jwtString !== null) {
    res.status(200).json({
      token: jwtString,
    });
  }
});

app.post("/signup", validateUserLoginData, async (req, res) => {
  const ExistingUser = await UserAuth.findOne({
    username: req.headers.username,
  });
  if (ExistingUser) {
    res.status(404).json({
      msg: "user with email already exist",
    });
    return;
  }
  const obj = {
    username: req.headers.username,
    password: req.headers.password,
  };

  const user = new UserAuth(obj);
  user.save();

  users.push(obj);
  let jwtString = validateUserDetails(obj.username, obj.password, res);
  if (jwtString !== null) {
    res.status(200).json({
      token: jwtString,
    });
  }
});

app.get("/todos", verifyToken, async (req, res) => {
  const todos = await Todos.find();
  console.log(todos);
  if (todos) {
    res.status(200).json(todos);
  } else {
    res.status(404).send("there is no todos yet");
  }
});

app.get("/todos/:id", verifyToken, (req, res) => {
  const todo = Todos.findById(req.params.id);
  if (!todo) {
    res.status(404).send("there is no todo with given id");
  } else {
    res.json(todo);
  }
});

app.post("/todos", verifyToken, validateUserTodoData, async (req, res) => {
  const Todo = new Todos({
    title: req.body.title,
    description: req.body.description,
  });
  const newTodo = await Todo.save();
  res.status(201).json(newTodo);
});

app.put("/todos/:id", verifyToken, validateUserTodoData, async (req, res) => {
  const todoUpdated = await Todos.findByIdAndUpdate(
    req.params.id,
    {
      title: req.body.title,
      description: req.body.description,
    },
    { new: true }
  );

  if (todoUpdated) {
    res.status(200).json({
      msg: todoUpdated,
    });
  } else {
    res.status(404).send("there is no such todo with given id");
  }
});

app.delete("/todos/:id", verifyToken, async (req, res) => {
  const todoDeleted = await Todos.findByIdAndDelete(req.params.id);
  if (todoDeleted) {
    res.status(200).send("successfully deleted");
  } else {
    res.status(404).send("there is no such todo with given id");
  }
});

// for all other routes, return 404
app.use((req, res, next) => {
  res.status(404).send();
});

app.use((err, req, res, next) => {
  res.status(500).send("internal server error");
});

app.listen(port, () => {
  console.log("server is listening on port : " + port);
});

module.exports = app;
